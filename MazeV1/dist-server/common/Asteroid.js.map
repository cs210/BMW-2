{"version":3,"sources":["../../src/common/Asteroid.js"],"names":["game","p2","Asteroid","gameEngine","physicsEngine","physicsObj","Body","mass","damping","angularDamping","position","x","y","velocity","addShape","Circle","radius","collisionGroup","ASTEROID","collisionMask","BULLET","SHIP","addAsteroidVerts","world","addBody","removeBody","verts","shapes","j","numAsteroidVerts","angle","Math","PI","xv","cos","yv","sin","push","other","level","max","Object","assign","type","BaseTypes","TYPES","INT16","PhysicalObject2D"],"mappings":";;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAIA,IAAI,GAAG,IAAX;AACA,IAAIC,EAAE,GAAG,IAAT;;IAEqBC,Q;;;;;;;;;;;;;AAcjB;mCACe;AACXF,MAAAA,IAAI,GAAG,KAAKG,UAAZ;AACAF,MAAAA,EAAE,GAAGD,IAAI,CAACI,aAAL,CAAmBH,EAAxB;AACA,WAAKI,UAAL,GAAkB,IAAIJ,EAAE,CAACK,IAAP,CAAY;AAC1BC,QAAAA,IAAI,EAAE,KAAKA,IADe;AACTC,QAAAA,OAAO,EAAE,CADA;AACGC,QAAAA,cAAc,EAAE,CADnB;AAE1BC,QAAAA,QAAQ,EAAE,CAAC,KAAKA,QAAL,CAAcC,CAAf,EAAkB,KAAKD,QAAL,CAAcE,CAAhC,CAFgB;AAG1BC,QAAAA,QAAQ,EAAE,CAAC,KAAKA,QAAL,CAAcF,CAAf,EAAkB,KAAKE,QAAL,CAAcD,CAAhC;AAHgB,OAAZ,CAAlB;AAKA,WAAKP,UAAL,CAAgBS,QAAhB,CAAyB,IAAIb,EAAE,CAACc,MAAP,CAAc;AACnCC,QAAAA,MAAM,EAAE,CAD2B;AAEnCC,QAAAA,cAAc,EAAEjB,IAAI,CAACkB,QAFc;AAEJ;AAC/BC,QAAAA,aAAa,EAAEnB,IAAI,CAACoB,MAAL,GAAcpB,IAAI,CAACqB,IAHC,CAGI;;AAHJ,OAAd,CAAzB;AAKA,WAAKC,gBAAL;AACAtB,MAAAA,IAAI,CAACI,aAAL,CAAmBmB,KAAnB,CAAyBC,OAAzB,CAAiC,KAAKnB,UAAtC;AACH,K,CAED;;;;wCACoB;AAChBL,MAAAA,IAAI,CAACI,aAAL,CAAmBmB,KAAnB,CAAyBE,UAAzB,CAAoC,KAAKpB,UAAzC;AACH,K,CAED;;;;uCACmB;AACf,WAAKA,UAAL,CAAgBqB,KAAhB,GAAwB,EAAxB;AACA,UAAIV,MAAM,GAAG,KAAKX,UAAL,CAAgBsB,MAAhB,CAAuB,CAAvB,EAA0BX,MAAvC;;AACA,WAAK,IAAIY,CAAC,GAAC,CAAX,EAAcA,CAAC,GAAG5B,IAAI,CAAC6B,gBAAvB,EAAyCD,CAAC,EAA1C,EAA8C;AAC1C,YAAIE,KAAK,GAAGF,CAAC,GAAC,CAAF,GAAIG,IAAI,CAACC,EAAT,GAAchC,IAAI,CAAC6B,gBAA/B;AACA,YAAII,EAAE,GAAGjB,MAAM,GAAGe,IAAI,CAACG,GAAL,CAASJ,KAAT,CAAlB;AACA,YAAIK,EAAE,GAAGnB,MAAM,GAAGe,IAAI,CAACK,GAAL,CAASN,KAAT,CAAlB;AACA,aAAKzB,UAAL,CAAgBqB,KAAhB,CAAsBW,IAAtB,CAA2B,CAACJ,EAAD,EAAKE,EAAL,CAA3B;AACH;AACJ;;;2BAEMG,K,EAAO;AACV,2EAAaA,KAAb;AACH;;;+BAEU;AACP,0HAA6C,KAAKC,KAAlD;AACH;;;AA/CD;AACA;wBACc;AACV,aAAO;AAAE7B,QAAAA,QAAQ,EAAE;AAAE8B,UAAAA,GAAG,EAAE;AAAP;AAAZ,OAAP;AACH;;;wBAVsB;AACnB,aAAOC,MAAM,CAACC,MAAP,CAAc;AACjBH,QAAAA,KAAK,EAAE;AAAEI,UAAAA,IAAI,EAAEC,mBAAUC,KAAV,CAAgBC;AAAxB;AADU,OAAd,qDAAP;AAGH;;;;EANiCC,yB","sourcesContent":["import { PhysicalObject2D, BaseTypes } from 'lance-gg';\n\nlet game = null;\nlet p2 = null;\n\nexport default class Asteroid extends PhysicalObject2D {\n\n    static get netScheme() {\n        return Object.assign({\n            level: { type: BaseTypes.TYPES.INT16 }\n        }, super.netScheme);\n    }\n\n    // position bending: bend fully to server position in each sync [percent=1.0],\n    // unless the position difference is larger than 4.0 (i.e. wrap beyond bounds)\n    get bending() {\n        return { position: { max: 4.0 } };\n    }\n\n    // on add-to-world, create a physics body\n    onAddToWorld() {\n        game = this.gameEngine;\n        p2 = game.physicsEngine.p2;\n        this.physicsObj = new p2.Body({\n            mass: this.mass, damping: 0, angularDamping: 0,\n            position: [this.position.x, this.position.y],\n            velocity: [this.velocity.x, this.velocity.y]\n        });\n        this.physicsObj.addShape(new p2.Circle({\n            radius: 1,\n            collisionGroup: game.ASTEROID, // Belongs to the ASTEROID group\n            collisionMask: game.BULLET | game.SHIP // Can collide with the BULLET or SHIP group\n        }));\n        this.addAsteroidVerts();\n        game.physicsEngine.world.addBody(this.physicsObj);\n    }\n\n    // on remove-from-world, remove the physics body\n    onRemoveFromWorld() {\n        game.physicsEngine.world.removeBody(this.physicsObj);\n    }\n\n    // Adds random .verts to an asteroid body\n    addAsteroidVerts() {\n        this.physicsObj.verts = [];\n        let radius = this.physicsObj.shapes[0].radius;\n        for (let j=0; j < game.numAsteroidVerts; j++) {\n            let angle = j*2*Math.PI / game.numAsteroidVerts;\n            let xv = radius * Math.cos(angle);\n            let yv = radius * Math.sin(angle);\n            this.physicsObj.verts.push([xv, yv]);\n        }\n    }\n\n    syncTo(other) {\n        super.syncTo(other);\n    }\n\n    toString() {\n        return `Asteroid::${super.toString()} Level${this.level}`;\n    }\n}\n"],"file":"Asteroid.js"}