{"version":3,"sources":["../../src/common/Ship.js"],"names":["game","p2","Ship","gameEngine","physicsEngine","shape","Circle","radius","shipSize","collisionGroup","SHIP","collisionMask","ASTEROID","physicsObj","Body","mass","position","x","y","angle","damping","angularDamping","addShape","world","addBody","removeBody","lives","other","max","angularVelocity","percent","angleLocal","Object","assign","type","BaseTypes","TYPES","INT8","PhysicalObject2D"],"mappings":";;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAIA,IAAI,GAAG,IAAX;AACA,IAAIC,EAAE,GAAG,IAAT;;IAEqBC,I;;;;;;;;;;;;;iCAkBJC,U,EAAY;AACrBH,MAAAA,IAAI,GAAGG,UAAP;AACAF,MAAAA,EAAE,GAAGE,UAAU,CAACC,aAAX,CAAyBH,EAA9B,CAFqB,CAIrB;;AACA,UAAII,KAAK,GAAG,KAAKA,KAAL,GAAa,IAAIJ,EAAE,CAACK,MAAP,CAAc;AACnCC,QAAAA,MAAM,EAAEP,IAAI,CAACQ,QADsB;AAEnCC,QAAAA,cAAc,EAAET,IAAI,CAACU,IAFc;AAER;AAC3BC,QAAAA,aAAa,EAAEX,IAAI,CAACY,QAHe,CAGN;;AAHM,OAAd,CAAzB;AAKA,WAAKC,UAAL,GAAkB,IAAIZ,EAAE,CAACa,IAAP,CAAY;AAC1BC,QAAAA,IAAI,EAAE,CADoB;AAE1BC,QAAAA,QAAQ,EAAE,CAAC,KAAKA,QAAL,CAAcC,CAAf,EAAkB,KAAKD,QAAL,CAAcE,CAAhC,CAFgB;AAG1BC,QAAAA,KAAK,EAAE,KAAKA,KAHc;AAI1BC,QAAAA,OAAO,EAAE,CAJiB;AAIdC,QAAAA,cAAc,EAAE;AAJF,OAAZ,CAAlB;AAKA,WAAKR,UAAL,CAAgBS,QAAhB,CAAyBjB,KAAzB;AACAF,MAAAA,UAAU,CAACC,aAAX,CAAyBmB,KAAzB,CAA+BC,OAA/B,CAAuC,KAAKX,UAA5C;AACH;;;sCAEiBV,U,EAAY;AAC1BH,MAAAA,IAAI,CAACI,aAAL,CAAmBmB,KAAnB,CAAyBE,UAAzB,CAAoC,KAAKZ,UAAzC;AACH;;;+BAEU;AACP,mHAA0C,KAAKa,KAA/C;AACH;;;2BAEMC,K,EAAO;AACV,uEAAaA,KAAb;;AACA,WAAKD,KAAL,GAAaC,KAAK,CAACD,KAAnB;AACH;;;AAxCD;AACA;wBACc;AACV,aAAO;AACHV,QAAAA,QAAQ,EAAE;AAAEY,UAAAA,GAAG,EAAE;AAAP,SADP;AAEHC,QAAAA,eAAe,EAAE;AAAEC,UAAAA,OAAO,EAAE;AAAX,SAFd;AAGHC,QAAAA,UAAU,EAAE;AAAED,UAAAA,OAAO,EAAE;AAAX;AAHT,OAAP;AAKH;;;wBAdsB;AACnB,aAAOE,MAAM,CAACC,MAAP,CAAc;AACjBP,QAAAA,KAAK,EAAE;AAAEQ,UAAAA,IAAI,EAAEC,mBAAUC,KAAV,CAAgBC;AAAxB;AADU,OAAd,iDAAP;AAGH;;;;EAN6BC,yB","sourcesContent":["import { PhysicalObject2D, BaseTypes } from 'lance-gg';\n\nlet game = null;\nlet p2 = null;\n\nexport default class Ship extends PhysicalObject2D {\n\n    static get netScheme() {\n        return Object.assign({\n            lives: { type: BaseTypes.TYPES.INT8 }\n        }, super.netScheme);\n    }\n\n    // no position bending if difference is larger than 4.0 (i.e. wrap beyond bounds),\n    // no angular velocity bending, no local angle bending\n    get bending() {\n        return {\n            position: { max: 4.0 },\n            angularVelocity: { percent: 0.0 },\n            angleLocal: { percent: 0.0 }\n        };\n    }\n\n    onAddToWorld(gameEngine) {\n        game = gameEngine;\n        p2 = gameEngine.physicsEngine.p2;\n\n        // Add ship physics\n        let shape = this.shape = new p2.Circle({\n            radius: game.shipSize,\n            collisionGroup: game.SHIP, // Belongs to the SHIP group\n            collisionMask: game.ASTEROID // Only collide with the ASTEROID group\n        });\n        this.physicsObj = new p2.Body({\n            mass: 1,\n            position: [this.position.x, this.position.y],\n            angle: this.angle,\n            damping: 0, angularDamping: 0 });\n        this.physicsObj.addShape(shape);\n        gameEngine.physicsEngine.world.addBody(this.physicsObj);\n    }\n\n    onRemoveFromWorld(gameEngine) {\n        game.physicsEngine.world.removeBody(this.physicsObj);\n    }\n\n    toString() {\n        return `Ship::${super.toString()} lives=${this.lives}`;\n    }\n\n    syncTo(other) {\n        super.syncTo(other);\n        this.lives = other.lives;\n    }\n}\n"],"file":"Ship.js"}