{"version":3,"sources":["../../src/common/AsteroidsGameEngine.js"],"names":["AsteroidsGameEngine","options","physicsEngine","P2PhysicsEngine","gameEngine","world","defaultContactMaterial","friction","on","warpAll","bind","Object","assign","lives","shipSize","shipTurnSpeed","shipSpeed","bulletRadius","bulletLifeTime","asteroidRadius","numAsteroidLevels","numAsteroidVerts","maxAsteroidSpeed","spaceWidth","spaceHeight","SHIP","Math","pow","BULLET","ASTEROID","FINISHLINE","playerReady","forEachObject","id","obj","p","position","v","velocity","x","y","refreshToPhysics","serializer","registerClass","Ship","Asteroid","Bullet","FinishLine","inputData","playerId","playerShip","queryObject","instanceType","input","physicsObj","applyForceLocal","angle","refreshFromPhysics","random","s","mass","angularVelocity","TwoVector","won","addObjectToWorld","a","level","b","asteroid","bullet","asteroidBody","r","removeObjectFromWorld","GameEngine"],"mappings":"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","sourcesContent":["import { GameEngine, P2PhysicsEngine, TwoVector } from 'lance-gg';\r\nimport Asteroid from './Asteroid';\r\nimport Bullet from './Bullet';\r\nimport Ship from './Ship';\r\nimport FinishLine from \"./FinishLine\";\r\n\r\nexport default class AsteroidsGameEngine extends GameEngine {\r\n\r\n    constructor(options) {\r\n        super(options);\r\n\r\n        // create physics with no friction; wrap positions after each step\r\n        this.physicsEngine = new P2PhysicsEngine({ gameEngine: this });\r\n        this.physicsEngine.world.defaultContactMaterial.friction = 10;\r\n        this.on('postStep', this.warpAll.bind(this));\r\n\r\n        // game variables\r\n        Object.assign(this, {\r\n            lives: 0, shipSize: 0.3, shipTurnSpeed: 0.05, shipSpeed: 2, bulletRadius: 0.03, bulletLifeTime: 60,\r\n            asteroidRadius: 1.125, numAsteroidLevels: 4, numAsteroidVerts: 4, maxAsteroidSpeed: 0,\r\n            spaceWidth: 16, spaceHeight: 9, SHIP: Math.pow(2, 1), BULLET: Math.pow(2, 2),\r\n            ASTEROID: Math.pow(2, 3), FINISHLINE: Math.pow(2, 4)\r\n        });\r\n\r\n        this.playerReady = {};\r\n    }\r\n\r\n    // If the body is out of space bounds, warp it to the other side\r\n    warpAll() {\r\n        \r\n        this.world.forEachObject((id, obj) => {\r\n            let p = obj.position;\r\n            let v = obj.velocity;\r\n            if(p.x > this.spaceWidth/2)\r\n            {\r\n                p.x = this.spaceWidth/2; \r\n                v.x = 0;\r\n            }  \r\n            if(p.y > this.spaceHeight/2)\r\n            {\r\n                p.y = this.spaceHeight/2; \r\n                v.y = 0;\r\n            }  \r\n            if(p.x < -this.spaceWidth /2)\r\n            {\r\n                p.x = -this.spaceWidth/2; \r\n                v.x = 0; \r\n            } \r\n            if(p.y < -this.spaceHeight/2) \r\n            {\r\n                p.y = -this.spaceHeight/2; \r\n                v.y = 0;\r\n            }\r\n            obj.refreshToPhysics();\r\n        });\r\n\r\n    }\r\n\r\n    registerClasses(serializer) {\r\n        serializer.registerClass(Ship);\r\n        serializer.registerClass(Asteroid);\r\n        serializer.registerClass(Bullet);\r\n        serializer.registerClass(FinishLine);\r\n    }\r\n\r\n    processInput(inputData, playerId) {\r\n\r\n        super.processInput(inputData, playerId);\r\n\r\n        if (playerId in this.playerReady && this.playerReady[playerId]) {\r\n            // handle keyboard presses\r\n            let playerShip = this.world.queryObject({ playerId: playerId, instanceType: Ship });\r\n            if (playerShip) {\r\n                if (inputData.input === 'up')\r\n                {\r\n                    /*\r\n                    console.log(playerShip.physicsObj.position.y);\r\n                    playerShip.physicsObj.position.y += 0.5;\r\n                    console.log(playerShip.physicsObj.position.y);\r\n                    */\r\n                    playerShip.physicsObj.applyForceLocal([0,this.shipSpeed]);\r\n                }\r\n                else if (inputData.input === 'right')\r\n                {\r\n                    playerShip.physicsObj.angle -= this.shipTurnSpeed;\r\n                }\r\n                else if (inputData.input === 'left')\r\n                {\r\n                    playerShip.physicsObj.angle += this.shipTurnSpeed;\r\n                }\r\n                else if (inputData.input === 'down')\r\n                {\r\n                    playerShip.physicsObj.applyForceLocal([0,-this.shipSpeed]);\r\n                }\r\n                /*\r\n                else if (inputData.input === 'space')\r\n                {\r\n                    this.emit('shoot', playerShip);\r\n                }\r\n                */\r\n                playerShip.refreshFromPhysics();\r\n            }\r\n        }\r\n    }\r\n\r\n    // returns a random number between -0.5 and 0.5\r\n    rand() {\r\n        return Math.random() - 0.5;\r\n    }\r\n\r\n    // create ship\r\n    addShip(playerId) {\r\n        let s = new Ship(this, {}, {\r\n            playerId: playerId,\r\n            mass: 10, angularVelocity: 0,\r\n            position: new TwoVector(-6.4, -3.6), velocity: new TwoVector(0, 0)\r\n        });\r\n        s.lives = this.lives;\r\n        s.won = false;\r\n        this.addObjectToWorld(s);\r\n    }\r\n\r\n    // create asteroids\r\n    addAsteroids() {\r\n        // add asteroids to the bottom half of the screen\r\n        let a = new Asteroid(this, {}, {\r\n            mass: 100000,\r\n            position: new TwoVector(-1.5, -2),\r\n            velocity: new TwoVector(0, 0),\r\n            angularVelocity: 0\r\n        }, new TwoVector(13, 1));\r\n        a.level = 0;\r\n        this.addObjectToWorld(a);\r\n\r\n        // add asteroids to the bottom half of the screen\r\n        let b = new Asteroid(this, {}, {\r\n            mass: 100000,\r\n            position: new TwoVector(1.5, 2),\r\n            velocity: new TwoVector(0, 0),\r\n            angularVelocity: 0\r\n        }, new TwoVector(13, 1));\r\n        b.level = 0;\r\n        this.addObjectToWorld(b);\r\n    }\r\n\r\n    // Add finishline\r\n    addFinishLine() {\r\n        var a = new FinishLine(this, {}, {\r\n            mass: 100000,\r\n            position: new TwoVector(6.5, 3.75),\r\n            velocity: new TwoVector(0, 0),\r\n            angularVelocity: 0\r\n        },\r\n            new TwoVector(1, 1)\r\n        );\r\n        a.level = 0;\r\n        this.addObjectToWorld(a);\r\n    }\r\n\r\n    // asteroid explosion\r\n    explode(asteroid, bullet) {\r\n\r\n        // Remove asteroid and bullet\r\n        let asteroidBody = asteroid.physicsObj;\r\n        let level = asteroid.level;\r\n        let x = asteroidBody.position[0];\r\n        let y = asteroidBody.position[1];\r\n        let r = this.asteroidRadius * (this.numAsteroidLevels - level) / this.numAsteroidLevels;\r\n        this.removeObjectFromWorld(asteroid);\r\n        this.removeObjectFromWorld(bullet);\r\n\r\n        // Add new sub-asteroids\r\n        /*\r\n        if (level < 3) {\r\n            let angleDisturb = Math.PI/2 * Math.random();\r\n            for (let i=0; i<4; i++) {\r\n                let angle = Math.PI/2 * i + angleDisturb;\r\n                let subAsteroid = new Asteroid(this, {}, {\r\n                    mass: 10,\r\n                    position: new TwoVector(x + r * Math.cos(angle), y + r * Math.sin(angle)),\r\n                    velocity: new TwoVector(0, 0)\r\n                });\r\n                subAsteroid.level = level + 1;\r\n                this.trace.info(() => `creating sub-asteroid with radius ${r}: ${subAsteroid.toString()}`);\r\n                this.addObjectToWorld(subAsteroid);\r\n            }\r\n        }\r\n        */\r\n    }\r\n}\r\n"],"file":"AsteroidsGameEngine.js"}