{"version":3,"sources":["../../src/common/AsteroidsGameEngine.js"],"names":["AsteroidsGameEngine","options","physicsEngine","P2PhysicsEngine","gameEngine","world","defaultContactMaterial","friction","on","warpAll","bind","Object","assign","lives","shipSize","shipTurnSpeed","shipSpeed","bulletRadius","bulletLifeTime","asteroidRadius","numAsteroidLevels","numAsteroidVerts","maxAsteroidSpeed","spaceWidth","spaceHeight","SHIP","Math","pow","BULLET","ASTEROID","forEachObject","id","obj","p","position","v","velocity","x","y","refreshToPhysics","serializer","registerClass","Ship","Asteroid","Bullet","inputData","playerId","playerShip","queryObject","instanceType","input","physicsObj","applyForceLocal","angle","refreshFromPhysics","random","s","mass","angularVelocity","TwoVector","addObjectToWorld","i","vx","vy","va","a","level","asteroid","bullet","asteroidBody","r","removeObjectFromWorld","GameEngine"],"mappings":"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","sourcesContent":["import { GameEngine, P2PhysicsEngine, TwoVector } from 'lance-gg';\nimport Asteroid from './Asteroid';\nimport Bullet from './Bullet';\nimport Ship from './Ship';\n\nexport default class AsteroidsGameEngine extends GameEngine {\n\n    constructor(options) {\n        super(options);\n\n        // create physics with no friction; wrap positions after each step\n        this.physicsEngine = new P2PhysicsEngine({ gameEngine: this });\n        this.physicsEngine.world.defaultContactMaterial.friction = 10;\n        this.on('postStep', this.warpAll.bind(this));\n\n        // game variables\n        Object.assign(this, {\n            lives: 0, shipSize: 0.3, shipTurnSpeed: 0.05, shipSpeed: 2, bulletRadius: 0.03, bulletLifeTime: 60,\n            asteroidRadius: 1.125, numAsteroidLevels: 4, numAsteroidVerts: 4, maxAsteroidSpeed: 0,\n            spaceWidth: 16, spaceHeight: 9, SHIP: Math.pow(2, 1), BULLET: Math.pow(2, 2), ASTEROID: Math.pow(2, 3)\n        });\n    }\n\n    // If the body is out of space bounds, warp it to the other side\n    warpAll() {\n        \n        this.world.forEachObject((id, obj) => {\n            let p = obj.position;\n            let v = obj.velocity;\n            if(p.x > this.spaceWidth/2)\n            {\n                p.x = this.spaceWidth/2; \n                v.x = 0;\n            }  \n            if(p.y > this.spaceHeight/2)\n            {\n                p.y = this.spaceHeight/2; \n                v.y = 0;\n            }  \n            if(p.x < -this.spaceWidth /2)\n            {\n                p.x = -this.spaceWidth/2; \n                v.x = 0; \n            } \n            if(p.y < -this.spaceHeight/2) \n            {\n                p.y = -this.spaceHeight/2; \n                v.y = 0;\n            }\n            obj.refreshToPhysics();\n        });\n\n    }\n\n    registerClasses(serializer) {\n        serializer.registerClass(Ship);\n        serializer.registerClass(Asteroid);\n        serializer.registerClass(Bullet);\n    }\n\n    processInput(inputData, playerId) {\n\n        super.processInput(inputData, playerId);\n\n        // handle keyboard presses\n        let playerShip = this.world.queryObject({ playerId: playerId, instanceType: Ship });\n        if (playerShip) {\n            if (inputData.input === 'up')\n            {\n                /*\n                console.log(playerShip.physicsObj.position.y);\n                playerShip.physicsObj.position.y += 0.5;\n                console.log(playerShip.physicsObj.position.y);\n                */\n                playerShip.physicsObj.applyForceLocal([0,this.shipSpeed]);\n            } \n            else if (inputData.input === 'right')\n            {\n                playerShip.physicsObj.angle -= this.shipTurnSpeed;\n            } \n            else if (inputData.input === 'left') \n            {\n                playerShip.physicsObj.angle += this.shipTurnSpeed;\n            } \n            else if (inputData.input === 'down')\n            {\n                playerShip.physicsObj.applyForceLocal([0,-this.shipSpeed]);\n            } \n            /*\n            else if (inputData.input === 'space')\n            {\n                this.emit('shoot', playerShip);\n            }\n            */\n            playerShip.refreshFromPhysics();\n        }\n    }\n\n    // returns a random number between -0.5 and 0.5\n    rand() {\n        return Math.random() - 0.5;\n    }\n\n    // create ship\n    addShip(playerId) {\n        let s = new Ship(this, {}, {\n            playerId: playerId,\n            mass: 10, angularVelocity: 0,\n            position: new TwoVector(-6.4, -3.6), velocity: new TwoVector(0, 0)\n        });\n        s.lives = this.lives;\n        this.addObjectToWorld(s);\n    }\n\n    // create asteroids\n    addAsteroids() {\n\n        // add asteroids to the bottom half of the screen\n        for(var i = -0.5; i < 0.4; i = i + 0.1) {\n            var x = i * this.spaceWidth;\n            var y = -2;\n            let vx = 0;\n            let vy = 0;\n            let va = 0;\n\n            // Create asteroid Body\n            var a = new Asteroid(this, {}, {\n                mass: 100000,\n                position: new TwoVector(x, y),\n                velocity: new TwoVector(vx, vy),\n                angularVelocity: va\n            });\n            a.level = 0;\n            this.addObjectToWorld(a);\n        }\n\n        // add asteroids to the top half of the screen\n        for(var i = 0.5; i > -0.4; i = i - 0.1) {\n            var x = i * this.spaceWidth;\n            var y = 2;\n            let vx = 0;\n            let vy = 0;\n            let va = 0;\n\n            // Create asteroid Body\n            var a = new Asteroid(this, {}, {\n                mass: 100000,\n                position: new TwoVector(x, y),\n                velocity: new TwoVector(vx, vy),\n                angularVelocity: va\n            });\n            a.level = 0;\n            this.addObjectToWorld(a);\n        }\n\n        \n    }\n\n    // asteroid explosion\n    explode(asteroid, bullet) {\n\n        // Remove asteroid and bullet\n        let asteroidBody = asteroid.physicsObj;\n        let level = asteroid.level;\n        let x = asteroidBody.position[0];\n        let y = asteroidBody.position[1];\n        let r = this.asteroidRadius * (this.numAsteroidLevels - level) / this.numAsteroidLevels;\n        this.removeObjectFromWorld(asteroid);\n        this.removeObjectFromWorld(bullet);\n\n        // Add new sub-asteroids\n        /*\n        if (level < 3) {\n            let angleDisturb = Math.PI/2 * Math.random();\n            for (let i=0; i<4; i++) {\n                let angle = Math.PI/2 * i + angleDisturb;\n                let subAsteroid = new Asteroid(this, {}, {\n                    mass: 10,\n                    position: new TwoVector(x + r * Math.cos(angle), y + r * Math.sin(angle)),\n                    velocity: new TwoVector(0, 0)\n                });\n                subAsteroid.level = level + 1;\n                this.trace.info(() => `creating sub-asteroid with radius ${r}: ${subAsteroid.toString()}`);\n                this.addObjectToWorld(subAsteroid);\n            }\n        }\n        */\n    }\n}\n"],"file":"AsteroidsGameEngine.js"}