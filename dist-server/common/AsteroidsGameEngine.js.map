{"version":3,"sources":["../../src/common/AsteroidsGameEngine.js"],"names":["AsteroidsGameEngine","options","physicsEngine","P2PhysicsEngine","gameEngine","world","defaultContactMaterial","friction","on","warpAll","bind","Object","assign","lives","shipSize","shipTurnSpeed","shipSpeed","bulletRadius","bulletLifeTime","asteroidRadius","numAsteroidLevels","numAsteroidVerts","maxAsteroidSpeed","spaceWidth","spaceHeight","SHIP","Math","pow","BULLET","ASTEROID","FINISHLINE","playerReady","forEachObject","id","obj","p","position","v","velocity","x","y","refreshToPhysics","serializer","registerClass","Ship","Asteroid","Bullet","FinishLine","inputData","playerId","playerShip","queryObject","instanceType","input","physicsObj","applyForceLocal","angle","emit","refreshFromPhysics","random","s","mass","angularVelocity","TwoVector","won","addObjectToWorld","RANDOMIZE_WORLD","a","level","b","c","d","asteroid","bullet","asteroidBody","r","removeObjectFromWorld","GameEngine"],"mappings":"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","sourcesContent":["import { GameEngine, P2PhysicsEngine, TwoVector } from 'lance-gg';\nimport Asteroid from './Asteroid';\nimport Bullet from './Bullet';\nimport Ship from './Ship';\nimport FinishLine from \"./FinishLine\";\n\nexport default class AsteroidsGameEngine extends GameEngine {\n\n    constructor(options) {\n        super(options);\n\n        // create physics with no friction; wrap positions after each step\n        this.physicsEngine = new P2PhysicsEngine({ gameEngine: this });\n        this.physicsEngine.world.defaultContactMaterial.friction = 10;\n        this.on('postStep', this.warpAll.bind(this));\n\n        // game variables\n        Object.assign(this, {\n            lives: 0, shipSize: 0.3, shipTurnSpeed: 0.05, shipSpeed: 2, bulletRadius: 0.03, bulletLifeTime: 60,\n            asteroidRadius: 1.125, numAsteroidLevels: 4, numAsteroidVerts: 4, maxAsteroidSpeed: 0,\n            spaceWidth: 16, spaceHeight: 9, SHIP: Math.pow(2, 1), BULLET: Math.pow(2, 2),\n            ASTEROID: Math.pow(2, 3), FINISHLINE: Math.pow(2, 4)\n        });\n\n        this.playerReady = {};\n    }\n\n    // If the body is out of space bounds, warp it to the other side\n    warpAll() {\n\n        this.world.forEachObject((id, obj) => {\n            let p = obj.position;\n            let v = obj.velocity;\n            if (p.x > this.spaceWidth/2) {\n                p.x = this.spaceWidth/2;\n                v.x = 0;\n            }\n            if (p.y > this.spaceHeight/2) {\n                p.y = this.spaceHeight/2;\n                v.y = 0;\n            }\n            if(p.x < -this.spaceWidth /2) {\n                p.x = -this.spaceWidth/2;\n                v.x = 0;\n            }\n            if(p.y < -this.spaceHeight/2) {\n                p.y = -this.spaceHeight/2;\n                v.y = 0;\n            }\n            obj.refreshToPhysics();\n        });\n\n    }\n\n    registerClasses(serializer) {\n        serializer.registerClass(Ship);\n        serializer.registerClass(Asteroid);\n        serializer.registerClass(Bullet);\n        serializer.registerClass(FinishLine);\n    }\n\n    processInput(inputData, playerId) {\n\n        super.processInput(inputData, playerId);\n\n        if (playerId in this.playerReady && this.playerReady[playerId]) {\n            // handle keyboard presses\n            let playerShip = this.world.queryObject({ playerId: playerId, instanceType: Ship });\n            if (playerShip) {\n                if (inputData.input === 'up') {\n                    playerShip.physicsObj.applyForceLocal([0,this.shipSpeed]);\n                } else if (inputData.input === 'right') {\n                    playerShip.physicsObj.angle -= this.shipTurnSpeed;\n                } else if (inputData.input === 'left') {\n                    playerShip.physicsObj.angle += this.shipTurnSpeed;\n                } else if (inputData.input === 'down') {\n                    playerShip.physicsObj.applyForceLocal([0,-this.shipSpeed]);\n                } else if (inputData.input === 'space') {\n                    this.emit('shoot', playerShip);\n                }\n\n                playerShip.refreshFromPhysics();\n            }\n        }\n    }\n\n    // returns a random number between -0.5 and 0.5\n    rand() {\n        return Math.random() - 0.5;\n    }\n\n    // create ship\n    addShip(playerId) {\n        let s = new Ship(this, {}, {\n            playerId: playerId,\n            mass: 10, angularVelocity: 0,\n            position: new TwoVector(-6.4, -3.6), velocity: new TwoVector(0, 0)\n        });\n        s.lives = this.lives;\n        s.won = false;\n        this.addObjectToWorld(s);\n    }\n\n    // create asteroids\n    addAsteroids() {\n        const RANDOMIZE_WORLD = true; // Math.random() > 0.5;\n        if (RANDOMIZE_WORLD) {\n            // add asteroids to the bottom half of the screen\n            let a = new Asteroid(this, {}, {\n                mass: 100000,\n                position: new TwoVector(-5, -1.5),\n                velocity: new TwoVector(0, 0),\n                angularVelocity: 0\n            }, new TwoVector(1, 7));\n            a.level = 0;\n            this.addObjectToWorld(a);\n\n            // add asteroids to the bottom half of the screen\n            let b = new Asteroid(this, {}, {\n                mass: 100000,\n                position: new TwoVector(5, 1.5),\n                velocity: new TwoVector(0, 0),\n                angularVelocity: 0\n            }, new TwoVector(1, 7));\n            b.level = 0;\n            this.addObjectToWorld(b);\n\n            let c = new Asteroid(this, {}, {\n                mass: 100000,\n                position: new TwoVector(0, 3),\n                velocity: new TwoVector(0, 0),\n                angularVelocity: 0\n            }, new TwoVector(1, 4));\n            c.level = 0;\n            this.addObjectToWorld(c);\n\n            let d = new Asteroid(this, {}, {\n                mass: 100000,\n                position: new TwoVector(0, -3),\n                velocity: new TwoVector(0, 0),\n                angularVelocity: 0\n            }, new TwoVector(1, 4));\n            d.level = 0;\n            this.addObjectToWorld(d);\n\n        } else {\n            // add asteroids to the bottom half of the screen\n            let a = new Asteroid(this, {}, {\n                mass: 100000,\n                position: new TwoVector(-1.5, -2),\n                velocity: new TwoVector(0, 0),\n                angularVelocity: 0\n            }, new TwoVector(13, 1));\n            a.level = 0;\n            this.addObjectToWorld(a);\n\n            // add asteroids to the bottom half of the screen\n            let b = new Asteroid(this, {}, {\n                mass: 100000,\n                position: new TwoVector(1.5, 2),\n                velocity: new TwoVector(0, 0),\n                angularVelocity: 0\n            }, new TwoVector(13, 1));\n            b.level = 0;\n            this.addObjectToWorld(b);\n        }\n    }\n\n    // Add finishline\n    addFinishLine() {\n        let a = new FinishLine(this, {}, {\n            mass: 100000,\n            position: new TwoVector(6.5, 3.75),\n            velocity: new TwoVector(0, 0),\n            angularVelocity: 0\n        },\n            new TwoVector(1, 1)\n        );\n        a.level = 0;\n        this.addObjectToWorld(a);\n    }\n\n    // asteroid explosion\n    explode(asteroid, bullet) {\n\n        // Remove asteroid and bullet\n        let asteroidBody = asteroid.physicsObj;\n        let level = asteroid.level;\n        let x = asteroidBody.position[0];\n        let y = asteroidBody.position[1];\n        let r = this.asteroidRadius * (this.numAsteroidLevels - level) / this.numAsteroidLevels;\n        this.removeObjectFromWorld(asteroid);\n        this.removeObjectFromWorld(bullet);\n\n        // Add new sub-asteroids\n        /*\n        if (level < 3) {\n            let angleDisturb = Math.PI/2 * Math.random();\n            for (let i=0; i<4; i++) {\n                let angle = Math.PI/2 * i + angleDisturb;\n                let subAsteroid = new Asteroid(this, {}, {\n                    mass: 10,\n                    position: new TwoVector(x + r * Math.cos(angle), y + r * Math.sin(angle)),\n                    velocity: new TwoVector(0, 0)\n                });\n                subAsteroid.level = level + 1;\n                this.trace.info(() => `creating sub-asteroid with radius ${r}: ${subAsteroid.toString()}`);\n                this.addObjectToWorld(subAsteroid);\n            }\n        }\n        */\n    }\n}\n"],"file":"AsteroidsGameEngine.js"}