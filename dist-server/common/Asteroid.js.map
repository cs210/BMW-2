{"version":3,"sources":["../../src/common/Asteroid.js"],"names":["game","p2","Asteroid","gameEngine","options","props","dim","console","log","physicsEngine","physicsObj","Body","mass","damping","angularDamping","position","x","y","velocity","addShape","Circle","radius","collisionGroup","ASTEROID","collisionMask","BULLET","SHIP","addAsteroidVerts","world","addBody","removeBody","verts","shapes","j","numAsteroidVerts","angle","Math","PI","xv","cos","yv","sin","push","other","level","max","Object","assign","type","BaseTypes","TYPES","INT16","CLASSINSTANCE","PhysicalObject2D"],"mappings":"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","sourcesContent":["import { PhysicalObject2D, BaseTypes } from 'lance-gg';\r\n\r\nlet game = null;\r\nlet p2 = null;\r\n\r\nexport default class Asteroid extends PhysicalObject2D {\r\n\r\n    constructor(gameEngine, options, props, dim) {\r\n        super(gameEngine, options, props);\r\n        this.dim = dim;\r\n    }\r\n\r\n    static get netScheme() {\r\n        return Object.assign({\r\n            level: { type: BaseTypes.TYPES.INT16 },\r\n            dim: { type: BaseTypes.TYPES.CLASSINSTANCE }\r\n        }, super.netScheme);\r\n    }\r\n\r\n    // position bending: bend fully to server position in each sync [percent=1.0],\r\n    // unless the position difference is larger than 4.0 (i.e. wrap beyond bounds)\r\n    get bending() {\r\n        return { position: { max: 4.0 } };\r\n    }\r\n\r\n    // on add-to-world, create a physics body\r\n    onAddToWorld() {\r\n        console.log(\"Variable dim that is passed thru: \");\r\n        console.log(this.dim);\r\n        game = this.gameEngine;\r\n        p2 = game.physicsEngine.p2;\r\n        this.physicsObj = new p2.Body({\r\n            mass: this.mass, damping: 0, angularDamping: 0,\r\n            position: [this.position.x, this.position.y],\r\n            velocity: [this.velocity.x, this.velocity.y]\r\n        });\r\n        this.physicsObj.addShape(new p2.Circle({\r\n            radius: 1.125,\r\n            collisionGroup: game.ASTEROID, // Belongs to the ASTEROID group\r\n            collisionMask: game.BULLET | game.SHIP // Can collide with the BULLET or SHIP group\r\n        }));\r\n        this.addAsteroidVerts();\r\n        game.physicsEngine.world.addBody(this.physicsObj);\r\n    }\r\n\r\n    // on remove-from-world, remove the physics body\r\n    onRemoveFromWorld() {\r\n        game.physicsEngine.world.removeBody(this.physicsObj);\r\n    }\r\n\r\n    // Adds random .verts to an asteroid body\r\n    addAsteroidVerts() {\r\n        this.physicsObj.verts = [];\r\n        let radius = this.physicsObj.shapes[0].radius;\r\n        for (let j=0; j < game.numAsteroidVerts; j++) {\r\n            let angle = j*2*Math.PI / game.numAsteroidVerts;\r\n            let xv = radius * Math.cos(angle);\r\n            let yv = radius * Math.sin(angle);\r\n            this.physicsObj.verts.push([xv, yv]);\r\n        }\r\n    }\r\n\r\n    syncTo(other) {\r\n        super.syncTo(other);\r\n        this.dim = other.dim;\r\n    }\r\n\r\n    toString() {\r\n        return `Asteroid::${super.toString()} Level${this.level}`;\r\n    }\r\n}\r\n"],"file":"Asteroid.js"}